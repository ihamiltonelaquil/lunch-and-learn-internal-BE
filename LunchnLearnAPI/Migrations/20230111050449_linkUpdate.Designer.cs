// <auto-generated />
using System;
using LunchnLearnAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LunchnLearnAPI.Migrations
{
    [DbContext(typeof(LunchandLearnDbContext))]
    [Migration("20230111050449_linkUpdate")]
    partial class linkUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LunchnLearnAPI.Models.Domain.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MeetingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicURI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AttachmentId");

                    b.HasIndex("MeetingID");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("LunchnLearnAPI.Models.Domain.Link", b =>
                {
                    b.Property<Guid>("linkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeetingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("linkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("linkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("linkId");

                    b.HasIndex("MeetingID");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("LunchnLearnAPI.Models.Domain.Meeting", b =>
                {
                    b.Property<Guid>("MeetingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToSlides")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MeetingEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MeetingStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeamsLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingID");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("LunchnLearnAPI.Models.Domain.Attachment", b =>
                {
                    b.HasOne("LunchnLearnAPI.Models.Domain.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("LunchnLearnAPI.Models.Domain.Link", b =>
                {
                    b.HasOne("LunchnLearnAPI.Models.Domain.Meeting", "meeting")
                        .WithMany()
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("meeting");
                });
#pragma warning restore 612, 618
        }
    }
}
